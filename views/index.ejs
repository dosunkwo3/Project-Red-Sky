<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="with=device-width, initial-scale=1.0">
    <title>Project Red Sky</title>
    <link rel="stylesheet" type="text/css" href="/css/project.css">

</head>

<body>
    <div class="topnav">
        <ul>
          <li><a class="active" href="/">Home</a></li>
          <li><a href="/charts">Charts</a></li>
        </ul>
      </div>

    <h1>Fireball Map</h1>
    <h2>Filters</h2>
    <div id="map"></div>
    <script src="js/data.js"></script>
    <script>

        function pointInPoly(point, poly) {
            var x = point[0], y = point[1];

            var inside = false;
            for (var i = 0, j = poly.length - 1; i < poly.length; j = i++) {
                var xi = poly[i][0], yi = poly[i][1];
                var xj = poly[j][0], yj = poly[j][1];

                var intersect = ((yi > y) != (yj > y))
                    && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
                if (intersect) inside = !inside;
            }
            return inside;
        };

        //these are regions for each region, used for the region filters
        let SOUTH_AMERICA = [[1.25, -105], [1.25, -82.5], [15, -75], [15, -30], [-60, -30], [-60, -105]];
        let NA_1 = [[90, -168.75], [90, -10], [78.13, -10], [57.5, -37.5], [15, -30], [15, -75], [1.25, -82.5], [1.25, -105], [51, -180], [60, -180], [60, -168.75]];
        let NA_2 = [[51, 166.6], [51, 180], [60, 180]];
        let EUR = [[90, -10], [90, 77.5], [42.5, 48.8], [42.5, 30], [40.79, 28.81], [41, 29], [40.55, 27.31], [40.4, 26.75], [40.05, 26.36], [39.17, 25.19], [35.46, 27.91], [33, 27.5], [38, 10], [35.42, -10], [28.25, -13], [15, -30], [57.5, -37.5], [78.13, -10]];
        let AFRICA = [[15, -30], [28.25, -13], [35.42, -10], [38, 10], [33, 27.5], [31.74, 34.58], [29.54, 34.92], [27.78, 34.46], [11.3, 44.3], [12.5, 52], [-60, 75], [-60, -30]];
        let OCEANIA = [[-11.88, 110], [-10.27, 140], [-10, 145], [-30, 161.25], [-52.5, 142.5], [-31.88, 110]];
        let ASIA_1 = [[90, 77.5], [42.5, 48.8], [42.5, 30], [40.79, 28.81], [41, 29], [40.55, 27.31], [40.4, 26.75], [40.05, 26.36], [39.17, 25.19], [35.46, 27.91], [33, 27.5], [31.74, 34.58], [29.54, 34.92], [27.78, 34.46], [11.3, 44.3], [12.5, 52], [-60, 75], [-60, 110], [-31.88, 110], [-11.88, 110], [-10.27, 140], [33.13, 140], [51, 166.6], [60, 180], [90, 180]];
        let ASIA_2 = [[90, -180], [90, -168.75], [60, -168.75], [60, -180]];

        //csv data
        //data index's are: 0-time, 1-lat, 2-lng, 3-alt, 4-vel, 5-vx, 6-vy, 7-vz, 8-totRad, 9-totImpact

        let markers = [];//array of markers, used for plotting on the map
        let infowindows = [];//array of infowinders, pop up window for each marker w/ info about fireball
        let map;//google maps map
        console.log("making map");
        function initMap() {//creates the map

            var myLatLng = { lat: 33.8, lng: -90.2 };//starting map spot, USA centered
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 4,
                center: myLatLng,
            });


            //creates markers
            for (let i = 0; i < data.length; i++) {//loops over all data points
                myLatLng = { lat: parseFloat(data[i][1]), lng: parseFloat(data[i][2]) };//coordinate of fireball

                //each coordinate gets a marker
                var titleStr = "Marker " + i;
                let marker = new google.maps.Marker({
                    position: myLatLng,
                    map,
                    title: titleStr
                });

                markers.push(marker);


                let contentString = "";//this will be what the infowindow displays
                if (data[i][5] == "") {//some data has missing information. instead of blanks, just don't include it for better readability
                    contentString = "<p>" + "Time: " + data[i][0] + "<br>"
                        + "Latitude: " + data[i][1] + "<br>"
                        + "Longitude: " + data[i][2] + "<br>"
                        + "Altitude (km): " + data[i][3] + "<br>"
                        + "Velocity (km/s): " + data[i][4] + "<br>"
                        + "Total Radiated Energy (J): " + data[i][8] + "<br>"
                        + "Calculated Total Impact Energy (kt): " + data[i][9] + "</p>";
                } else {
                    contentString = "<p>" + "Time: " + data[i][0] + "<br>"
                        + "Latitude: " + data[i][1] + "<br>"
                        + "Longitude: " + data[i][2] + "<br>"
                        + "Altitude (km): " + data[i][3] + "<br>"
                        + "Velocity (km/s): " + data[i][4] + "<br>"
                        + "vx: " + data[i][5] + "<br>"
                        + "vy: " + data[i][6] + "<br>"
                        + "vz: " + data[i][7] + "<br>"
                        + "Total Radiated Energy (J): " + data[i][8] + "<br>"
                        + "Calculated Total Impact Energy (kt): " + data[i][9] + "</p>";
                }

                //each marker gets an infowindow
                const infowindow = new google.maps.InfoWindow({
                    content: contentString,
                    position: myLatLng
                });
                infowindows.push(infowindow);

                //whenever a marker gets clicked, an infowindow is displayed
                marker.addListener("click", () => {
                    infowindow.open({
                        map: map,
                        anchor: marker,
                        shouldFocus: false
                    });
                });
            }

            //click listeners for the filter buttons
            document.getElementById('filter-markers').addEventListener('click', filterMarkers);
            document.getElementById('hide-markers').addEventListener('click', hideAllMarkers);
            document.getElementById('show-markers').addEventListener('click', showAllMarkers);
        }

        window.initMap = initMap; //creates the default map

        //hides all markers
        function hideAllMarkers() {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
                document.getElementById("region1").checked = false;
                document.getElementById("region2").checked = false;
                document.getElementById("region3").checked = false;
                document.getElementById("region4").checked = false;
                document.getElementById("region5").checked = false;
                document.getElementById("region6").checked = false;
                document.getElementById("energy1").checked = false;
                document.getElementById("energy2").checked = false;
                document.getElementById("energy3").checked = false;
                document.getElementById("energy4").checked = false;
                document.getElementById("energy5").checked = false;
                document.getElementById("energy6").checked = false;
                document.getElementById("StartYear").value = "1988";
                document.getElementById("EndYear").value = "2022";
            }
        }

        //shows all markers
        function showAllMarkers() {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
                document.getElementById("region1").checked = true;
                document.getElementById("region2").checked = true;
                document.getElementById("region3").checked = true;
                document.getElementById("region4").checked = true;
                document.getElementById("region5").checked = true;
                document.getElementById("region6").checked = true;
                document.getElementById("energy1").checked = true;
                document.getElementById("energy2").checked = true;
                document.getElementById("energy3").checked = true;
                document.getElementById("energy4").checked = true;
                document.getElementById("energy5").checked = true;
                document.getElementById("energy6").checked = true;
                document.getElementById("StartYear").value = "1988";
                document.getElementById("EndYear").value = "2022";
            }
        }

        //this will see which filters are selected, and compare between the region, energy, and time filters
        function filterMarkers() {
            //checks to see which filters are chosen, value is true or false
            var NA = document.getElementById("region1").checked;
            var SA = document.getElementById("region2").checked;
            var EU = document.getElementById("region3").checked;
            var AS = document.getElementById("region4").checked;
            var AF = document.getElementById("region5").checked;
            var OC = document.getElementById("region6").checked;
            var nrg1 = document.getElementById("energy1").checked;
            var nrg2 = document.getElementById("energy2").checked;
            var nrg3 = document.getElementById("energy3").checked;
            var nrg4 = document.getElementById("energy4").checked;
            var nrg5 = document.getElementById("energy5").checked;
            var nrg6 = document.getElementById("energy6").checked;

            //time frame chosen
            var startYear = parseFloat(document.getElementById("StartYear").value);
            var endYear = parseFloat(document.getElementById("EndYear").value);

            //makes sure user input for the selected years is usable
            if (!(startYear >= 1988 && endYear <= 2022 && startYear != "" && endYear != "" && startYear < endYear)) {
                alert("Invalid year selection! Please pick a time between 1988 and 2022.");
                return;
            }

            //impact energy filter
            function matchesEnergy(row) {
                if (!(nrg1 || nrg2 || nrg3 || nrg4 || nrg5 || nrg6)) {
                    return true;
                }
                var value = parseFloat(row[9]);
                return nrg1 && value < 0.1
                    || nrg2 && value >= 0.1 && value < 0.2
                    || nrg3 && value >= 0.2 && value < 0.3
                    || nrg4 && value >= 0.3 && value < 0.4
                    || nrg5 && value >= 0.4 && value < 0.5
                    || nrg6 && value >= 0.5;
            }

            //time filter
            function matchesDates(row) {
                if (startYear != "" && endYear != "" && startYear < endYear) {
                    let iYear = parseFloat(row[0].substring(0, 4));
                    return iYear >= startYear && iYear <= endYear;
                } else {
                    return true;
                }
            }

            //region filter
            function matchesRegions(row) {
                let point = [parseFloat(row[1]), parseFloat(row[2])];
                //need filters for NA EU AS AF OC
                return SA && pointInPoly(point, SOUTH_AMERICA)
                    || NA && (pointInPoly(point, NA_1) || pointInPoly(point, NA_2))
                    || EU && pointInPoly(point, EUR)
                    || AF && pointInPoly(point, AFRICA)
                    || AS && (pointInPoly(point, ASIA_1) || pointInPoly(point, ASIA_1))
                    || OC && pointInPoly(point, OCEANIA);
            }

            //each data index is used to see if matches all the applied filters
            let isShown = data.map(row =>
                matchesEnergy(row)
                && matchesDates(row)
                && matchesRegions(row)
            );

            //loops through each marker to see if it maches the filters applied
            for (let i = 0; i < markers.length; i++) {
                let showMarker = isShown[i];
                markers[i].setMap(showMarker ? map : null);
            }
        }
    </script>

    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDjbLOdbGLfQqbUeFYb9wMFRIte7TpFBhs&callback=initMap&v=weekly"
        defer></script>

     <%- include('filtersettings') %>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <style>
        th {
            cursor: pointer;
            color: #fff;
        }
    </style>

    <!-- Table Headers -->
    <div class="outer-wrapper">
        <div class="table-wrapper">

            <table class="table table-striped">
                <tr class="bg-info">
                    <th data-colname="date" data-order="desc"> Date/Time (UT) &#9650</th>
                    <th data-colname="latitude">Latitude (deg) &#9650</th>
                    <th data-colname="longitude" data-order="desc">Longitude (deg) &#9650</th>
                    <th data-colname="altitude" data-order="desc">Altitude (km) &#9650</th>
                    <th data-colname="velocity" data-order="desc">Velocity (km/s) &#9650</th>
                    <th data-colname="vx" data-order="desc">vx &#9650</th>
                    <th data-colname="vy" data-order="desc">vy &#9650</th>
                    <th data-colname="vz" data-order="desc">vz &#9650</th>
                    <th data-colname="radiatedEnergy" data-order="desc">Total Radiated Energy (J) &#9650</th>
                    <th data-colname="impactEnergy" data-order="desc">Calculated Total Impact Energy (kt) &#9650</th>
                </tr>

                <tbody id="myTable"> </tbody>
            </table>
            
            <script src="js/tabArray.js"></script>
            <script>
             
                
                buildTable(myArray)


                // Sort table                           <-Table sorting doesn't work yet

                $('th').on('click', function () {
                    var column = $(this).data('colname')
                    var order = $(this).data('order')
                    var text = $(this).html()
                    text = text.substring(0, text.length - 1);

                    if (order == 'desc') {
                        $(this).data('order', "asc")
                        myArray = myArray.sort((a, b) => a[column] > b[column] ? 1 : -1)
                        text += '&#9660'

                    } else {
                        $(this).data('order', "desc")
                        myArray = myArray.sort((a, b) => a[column] < b[column] ? 1 : -1)
                        text += '&#9650'
                    }
                    $(this).html(text)
                    buildTable(myArray)
                })


                function buildTable(data) {
                    var table = document.getElementById('myTable')
                    table.innerHTML = ''

                    for (var i = 0; i < data.length; i++) {
                        var colname = `num-${i}`
                        var row = `<tr>
                <td>${data[i].date}</td>
                <td>${data[i].latitude}</td>
                <td>${data[i].longitude}</td>
                <td>${data[i].altitude}</td>
                <td>${data[i].velocity}</td>
                <td>${data[i].vx}</td>
                <td>${data[i].vy}</td>
                <td>${data[i].vz}</td>
                <td>${(data[i].radiatedEnergy).toExponential(2)}</td>
                <td>${data[i].impactEnergy}</td>
            </tr>`
                        table.innerHTML += row
                    }
                }

            </script>
        </div>
    </div>
</body>


</html>